require(rgdal)
require(sp)
require(sf)
require(rgeos)
?readOGR
# Read SHAPEFILE.shp from the current working directory (".")
shape <- readOGR(dsn = "data/.", layer = "SHAPEFILE")
# Read SHAPEFILE.shp from the current working directory (".")
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "SHAPEFILE")
# Read SHAPEFILE.shp from the current working directory (".")
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
plot(shape)
head(shape)
require(raster)
install.packages("raster")
require(raster)
study_area <- getData("GADM", country = "CYP", level = 0,
path = "data/hexagonal-grids/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
text(81.5, 9.5, "Study Area:\nSri Lanka")
study_area <- getData("GADM", country = "CYP", level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
text(81.5, 9.5, "Study Area:\nSri Lanka")
?getData
study_area <- getData("GADM", country = "CYP", level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
text(81.5, 9.5, "Study Area:\nCyprus")
study_area <- getData("GADM", country = "GRC", level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
#text(81.5, 9.5, "Study Area:\nCyprus")
study_area <- getData("GADM", country = "CYP", level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
#text(81.5, 9.5, "Study Area:\nCyprus")
study_area <- getData("GADM", country = c("XXX","CYP"), level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
#text(81.5, 9.5, "Study Area:\nCyprus")
study_area <- getData("GADM", country = c("XXX"), level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
#text(81.5, 9.5, "Study Area:\nCyprus")
study_area <- getData("GADM", country = c("XNC","CYP"), level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
plot(study_area, col = "grey50", bg = "light blue", axes = TRUE)
#text(81.5, 9.5, "Study Area:\nCyprus")
?getData
?disaggregate
?%>%
?`%>%``
?`%>%`
study_area <- getData("GADM", country = c("CYP"), level = 0,
path = "data/") %>%
disaggregate %>%
geometry
study_area <- getData("GADM", country = c("CYP"), level = 0,
path = "data/")
?geometry
rm(list=ls())
require(rgdal)
require(sp)
require(sf)
require(rgeos)
require(raster)
?disaggregate
?geometry
study_area <- getData("GADM", country = c("CYP"), level = 0,
path = "data/")
study_area %>% disaggregate
study_area <- disaggregate(study_area)
study_area <- getData("GADM", country = c("CYP"), level = 0,
path = "data/")
str(study_area)
study_area <- disaggregate(study_area)
str(study_area)
# Read SHAPEFILE.shp from the current working directory (".")
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
proj4string(shape)
GridTopology(shape)
IDvaluesGridTopology(shape)
install.packages("splancs")
quartz()
plot(shape[1, ], col = "blue")
shapeL <- as(shape, "SpatialLines")
plot(shapeL)
in_nrows <- lapply(shapeL, function(x) sapply(x, nrow))
?st_split
require(sf)
install.packages("lwgeom")
require(lwgeom)
library(sf)
demo(nc, ask = FALSE, echo = FALSE)
x = st_subdivide(nc, 10)
plot(x[1])
plot(nc)
plot(x[1])
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
plot(shape)
require(rgdal)
# Read SHAPEFILE.shp from the current working directory (".")
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
x = st_subdivide(shape, 10)
shapeL <- as(shape, "SpatialLines")
x = st_subdivide(shapeL, 10)
x = st_subdivide(st_as_sf(shapeL), 10)
plot(x)
shapeL <- as(shape, "SpatialLines")
st_as_sf(shapeL)
plot(shapeL)
x = st_subdivide(shapeL, 10)
shapeL_sf <- st_as_sf(shapeL)
x = st_subdivide(shapeL_sf, 10)
plot(x)
x
plot(shapeL_sf)
plot(st_subdivide(shapeL_sf[1], 10))
shapeL_sf
?st_subdivide
plot(st_subdivide(shapeL_sf[1], 4000000))
plot(st_split(shapeL_sf[1], 4000000))
plot(st_split(shapeL_sf, 4000000))
plot(st_subdivide(shapeL_sf, 4000000))
plot(st_split(shape, 4000000))
plot(st_split(st_as_sf(shape), 4000000))
plot(st_split(st_as_sf(shapeL), 4000000))
rm(list=ls())
require(rgdal)
require(sp)
require(sf)
require(rgeos)
require(raster)
require(lwgeom)
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
plot(shape)
shapeL <- as(shape, "SpatialLines")
shapeL_sf <- st_as_sf(shapeL)
plot(shapeL_sf)
bb <- bbox(shapeL)
bb
?seq
660000-420000
# x-coords for 2 km grid lines
xcoords <- seq(from = 420000, to = 660000, by = 2000)
xcoords
# x-coords for 2 km grid lines, north-south
xcoordsNS <- seq(from = 420000, to = 660000, by = 2000)
# y-coords for 2 km grid lines, north-south
ycoordsS <- c(0)
# y-coords for 2 km grid lines, north-south
ycoordsS <- c(3820000); ycoordsN <- c(3960000)
length(xcoordsNS)
# y-coords for 2 km grid lines, north-south
ycoordsS <- rep(3820000, 121)
ycoordsN <- rep(3960000, 121)
s=data.frame(x=runif(10),y=1:10,z=rnorm(10))
s
coordinates(s)=~x+y
L = SpatialLines(list(Lines(list(Line(coordinates(s))),"X")))
plot(L)
Line(coordinates(s))
list(Line(coordinates(s))
)
Lines(list(Line(coordinates(s))),"X")
list(Lines(list(Line(coordinates(s))),"X"))
SpatialLines(list(Lines(list(Line(coordinates(s))),"X")))
str(bb)
bb[1,1]
bb
bb[1,2]
bb[2,1]
xcoordsNS <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
length(xcoordsNS) # 121
# y-coords for 2 km grid lines, north-south
ycoordsS <- rep(bb[2,1], length(xcoordsNS))
ycoordsN <- rep(bb[2,2], length(xcoordsNS) )
rm(list=ls())
require(rgdal)
require(sp)
# Read SHAPEFILE.shp from the current working directory
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
plot(shape)
shapeL <- as(shape, "SpatialLines")
bb <- bbox(shapeL) # get bounding box
## North-South lines
# x-coords for 2 km grid lines, north-south
xcoords <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
length(xcoordsNS) # 121
# y-coords for 2 km grid lines, north-south
ycoordsS <- rep(bb[2,1], length(xcoordsNS))
ycoordsN <- rep(bb[2,2], length(xcoordsNS) )
# y-coords for 2 km grid lines, north-south
ycoordsS <- rep(bb[2,1], length(xcoords))
ycoordsN <- rep(bb[2,2], length(xcoords))
data.frame(xcoords, ycoordsS)
## North-South lines
# x-coords for 2 km grid lines, north-south
xcoords1 <- xcoords2 <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
NScoords <- data.frame(xcoords1, ycoordsS, xcoords2, ycoordsN)
head(NScoorsd)
head(NScoords)
xcoordsS <- xcoordsN <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
length(xcoordsN) # 121
# y-coords for 2 km grid lines, north-south
ycoordsS <- rep(bb[2,1], length(xcoordsS))
ycoordsN <- rep(bb[2,2], length(xcoordsN))
NScoords <- data.frame(xcoordsS, ycoordsS, xcoordsN, ycoordsN)
head(NScoords)
Scoords <- data.frame(xcoordsS, ycoordsS)
Ncoords <- data.frame(xcoordsN, ycoordsN)
xcoordsS <- xcoordsN <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
length(xcoordsN) # 121
# y-coords for 2 km grid lines, north-south
ycoordsS <- rep(bb[2,1], length(xcoordsS))
ycoordsN <- rep(bb[2,2], length(xcoordsN))
Scoords <- data.frame(xcoordsS, ycoordsS)
Ncoords <- data.frame(xcoordsN, ycoordsN)
coordinates(Scoords) ~xcoordsS + ycoordsS
coordinates(Ncoords) ~xcoordsN + ycoordsN
coordinates(Scoords) = ~xcoordsS + ycoordsS
coordinates(Ncoords) = ~xcoordsN + ycoordsN
NSlines <- list()
?Line
i <- 1
as.matrix(rbind(Scoords[i,],Ncoords[i,]))
rbind(Scoords[i,],Ncoords[i,])
Line(rbind(Scoords[i,],Ncoords[i,]))
plot(Line(rbind(Scoords[i,],Ncoords[i,])))
list(Line(rbind(Scoords[i,],Ncoords[i,])))
Lines(list(Line(rbind(Scoords[i,],Ncoords[i,]))))
list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,]))), "X")
Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,]))), "X"))
# example
s=data.frame(x=runif(10),y=1:10,z=rnorm(10))
rbind(Scoords[i,],Ncoords[i,])
str(rbind(Scoords[i,],Ncoords[i,]))
s=data.frame(x=runif(10),y=1:10,z=rnorm(10))
coordinates(s)=~x+y
str(s)
coordinates(s)
coordinates(rbind(Scoords[i,],Ncoords[i,]))
Lines(coordinates(rbind(Scoords[i,],Ncoords[i,])))
Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))
Line(coordinates(s))
Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))
list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,]))))
Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")
SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
plot(SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X"))))
NSlines <- list()
for (i in 1:nrow(Scoords)){ NSlines <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
}
nrow(Scoords)
nrow(Scoords)[1]
nrow(Scoords)[2]
nrow(Scoords@coords)
xcoordsS <- xcoordsN <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
length(xcoordsN) # 121
shape <- readOGR(dsn = "data/Grid10km_region.shp", layer = "Grid10km_region")
plot(shape)
shapeL <- as(shape, "SpatialLines")
bb <- bbox(shapeL) # get bounding box
## North-South lines
# x-coords for 2 km grid lines, north-south
xcoordsS <- xcoordsN <- seq(from = bb[1,1], to = bb[1,2], by = 2000)
length(xcoordsN) # 121
ycoordsS <- rep(bb[2,1], length(xcoordsS))
ycoordsN <- rep(bb[2,2], length(xcoordsN))
Scoords <- data.frame(xcoordsS, ycoordsS)
Ncoords <- data.frame(xcoordsN, ycoordsN)
coordinates(Scoords) = ~xcoordsS + ycoordsS
coordinates(Ncoords) = ~xcoordsN + ycoordsN
NSlines <- list()
for (i in 1:nrow(Scoords)){ NSlines <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
proj4string(NSlines[[i]]) <- CRS(shapeL)
}
CRS(shapeL)
shapeL
CRS(shape)
str(shape)
CRS(shape@proj4string)
shape@proj4string
NSlines[[i]]
NSlines[[i]]@proj4string <- shape@proj4string
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
NSlines[[i]]@proj4string <- shape@proj4string
}
plot(shapeL)
for (i in 1:120) {plot(NSlines[[i]])}
plot(NSlines)
NSlines[[1]]
NSlines[[1]]@lines
plot(NSlines[[1]]@lines[[1]]@Lines[[1]]@coords)
plot(NSlines[[1]]@lines[[1]]@Lines)
plot(NSlines[[1]]@lines[[1]]@Lines[[1]])
plot(NSlines[[1]]@lines[[1]]@Lines)
plot(NSlines[[1]]@lines[[1]])
plot(NSlines[[1]]@lines)
plot(NSlines[[1]])
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")
NSlines[[i]]@proj4string <- shape@proj4string
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")
#NSlines[[i]]@proj4string <- shape@proj4string
}
NSlines[[i]]
NSlines
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- Lines(coordinates(rbind(Scoords[i,],Ncoords[i,]))), "X")
#NSlines[[i]]@proj4string <- shape@proj4string
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- Lines(coordinates(rbind(Scoords[i,],Ncoords[i,]) ), "X" )
#NSlines[[i]]@proj4string <- shape@proj4string
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- SpatialLines(list(Lines(list((coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
NSlines[[i]]@proj4string <- shape@proj4string
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- SpatialLines(list(Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X")))
NSlines[[i]]@proj4string <- shape@proj4string
}
for (i in 1:120) {plot(NSlines[[i]])
par(new=TRUE)}
for (i in 1:120) {plot(NSlines[[i]])
par(new=TRUE)}
plot(NSlines[[1]])
par(new=TRUE)
plot(NSlines[[2]])
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- (Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), "X"))
}
NSlinesSL <- SpatialLines(NSlines)
head(NSlines)
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- (Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), paste("X_",i) )
}
?paste
?Lines
paste("X_",i)
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- (Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,]))))), ID =  paste("X_",i, sep="")
)
}
NSlines <- list()
for (i in 1:nrow(Scoords@coords)){ NSlines[[i]] <- Lines(list(Line(coordinates(rbind(Scoords[i,],Ncoords[i,])))), ID =  paste("X_",i, sep="") )
}
NSlinesSL <- SpatialLines(NSlines)
NSlines@proj4string <- shape@proj4string
NSlinesSL@proj4string <- shape@proj4string
plot(NSlinesSL)
?SpatialLines
bb
## East-West lines
# x-coords for 2 km grid lines, north-south
ycoordsS <- ycoordsN <- seq(from = bb[2,1], to = bb[2,2], by = 2000)
length(ycoordsN) # 120
ycoordsE <- ycoordsW <- seq(from = bb[2,1], to = bb[2,2], by = 2000)
length(ycoordsE) # 71
# y-coords for 2 km grid lines, north-south
xcoordsS <- rep(bb[1,1], length(ycoordsE))
xcoordsN <- rep(bb[1,2], length(ycoordsE))
ycoordsE <- ycoordsW <- seq(from = bb[2,1], to = bb[2,2], by = 2000)
length(ycoordsE) # 71
# y-coords for 2 km grid lines, north-south
xcoordsW <- rep(bb[1,1], length(ycoordsE))
xcoordsE <- rep(bb[1,2], length(ycoordsE))
Wcoords <- data.frame(xcoordsW, ycoordsW)
Ecoords <- data.frame(xcoordsE, ycoordsE)
coordinates(Wcoords) = ~xcoordsW + ycoordsW
coordinates(Ecoords) = ~xcoordsE + ycoordsE
EWlines <- list()
for (i in 1:nrow(Wcoords@coords)){ EWlines[[i]] <- Lines(list(Line(coordinates(rbind(Wcoords[i,],Ecoords[i,])))), ID =  paste("X_",i, sep="") )
}
EWlinesSL <- SpatialLines(EWlines)
EWlinesSL@proj4string <- shape@proj4string
plot(EWlinesSL)
## Combine both NS and EW lines into one Spatial Lines object
all.2km.lines <- list()
## Combine both NS and EW lines into one Spatial Lines object
2km.lines <- list()
## Combine both NS and EW lines into one Spatial Lines object
twokm.lines <- list()
twokm.lines[[1]] <- NSlinesSL
twokm.lines[[2]] <- EWlinesSL
all.2km.lines <- do.call(rbind, twokm.lines)
plot(all.2km.lines)
writeOGR(all.2km.lines, dsn="outputs/Cyprus_2km.kml", layer="2km", driver="KML")
all.2km.linesPoly <- as(all.2km.lines, "SpatialPolygon")
?writeOGR
ogrDrivers
ogrDrivers()
writeOGR(all.2km.lines, dsn="outputs/Cyprus_2km.shp", layer="2km", driver="ESRI Shapefile")
require(raster)
require(sf)
sf_2kmlines <- st_as_sf(all.2km.lines)
sf_2kmlines_polygons <- st_polygonize(sf_2kmlines)
shp_2kmlines <- as(sf_2kmlines_polygons, "Spatial") # If you want sp
plot(sf_2kmlines_polygons)
plot(all.2km.lines)
sf_2kmlines <- st_as_sf(all.2km.lines)
plot(sf_2kmlines)
plot(sf_2kmlines)
sf_2kmlines_polygons <- st_polygonize(sf_2kmlines)
plot(sf_2kmlines_polygons)
str(sf_2kmlines_polygons)
str(all.2km.lines)
plot(sf_2kmlines_polygons)
length(all.2km.lines)
## Convert to spatial polygon for writing
df<-SpatialLinesDataFrame(all.2km.lines, data.frame(id=1:length(all.2km.lines)))
row.names(all.2km.lines)
## Convert to spatial polygon for writing
df<-SpatialLinesDataFrame(all.2km.lines, data.frame(id=row.names(all.2km.lines)))
?SpatialLinesDataFrame
## Convert to spatial polygon for writing
df<-SpatialLinesDataFrame(all.2km.lines, data.frame(id=1:length(all.2km.lines)), match.ID = F)
writeOGR(df, dsn="putputs/2km_Cyprus.shp" ,layer="2km", driver="ESRI Shapefile")
writeOGR(df, dsn="outputs/2km_Cyprus.shp" ,layer="2km", driver="ESRI Shapefile")
writeOGR(df, dsn="outputs/2km_Cyprus.kml" ,layer="2km", driver="KML")
## Create KML as well
epsg4326String <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
dfGMap <- spTransform(df, epsg4326String)
writeOGR(dfGMap, dsn="outputs/2km_Cyprus.kml" ,layer="2km", driver="KML")
writeOGR(dfGMap, dsn="outputs/2km_Cyprus_KML.kml" ,layer="2km", driver="KML")
?writeOGR
?ogrDrivers
